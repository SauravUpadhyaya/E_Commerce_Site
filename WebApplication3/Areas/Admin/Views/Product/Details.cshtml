@model WebApplication3.Models.Products
@{
    ViewData["Title"] = "Details";
}
<br />
<h2 class="text-info">Product Details</h2>
<form asp-action="Details" method="post" enctype="multipart/form-data">
    <div class=" row p-4 rounded border">
        <input type="hidden" asp-for="Id" />
        <div asp-validation-summary="ModelOnly" class="text-danger">
        </div>
        <div class="col-md-4">
            <div class="form-group" style="display: flex">

                <label asp-for="Name" style="width: 168px;"></label>


                <input asp-for="Name" class="form-control" readonly="readonly" />

                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: flex">

                <label asp-for="Price" style="width: 168px;"></label>

                <input asp-for="Price" class="form-control" readonly="readonly" />

                <span asp-validation-for="Price" class="text-danger"></span>
            </div>

            <div class="form-group" style="display: flex">

                <label asp-for="ProductColor" style="width: 168px;"></label>

                <input asp-for="ProductColor" class="form-control" readonly="readonly" />

                <span asp-validation-for="ProductColor" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: flex">

                <label asp-for="ProductTypeId" style="width: 168px;"></label>

                @*<select asp-for="ProductTypeId" asp-items="ViewBag.productTypeId" class="form-control" readonly="readonly" ></select>*@
                <input asp-for="ProductType.Producttype" asp-items="ViewBag.productTypeId" class="form-control" readonly="readonly" />

                <span asp-validation-for="ProductTypeId" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: flex">

                <label asp-for="SpecialTypeId" style="width: 168px;"></label>

                @*<select asp-for="ProductTypeId" asp-items="ViewBag.productTypeId" class="form-control" readonly="readonly" ></select>*@
                <input asp-for="SpecialType.SpecialTagType" asp-items="ViewBag.SpecialTypeId" class="form-control" readonly="readonly" />

                <span asp-validation-for="SpecialTypeId" class="text-danger"></span>
            </div>
            <div class="form-group" style="display: flex">

                <label asp-for="IsAvailable" style="width: 100px;"></label>

                <input asp-for="IsAvailable" disabled="disabled" type="checkbox"/>

                <span asp-validation-for="IsAvailable" class="text-danger"></span>
            </div>
            <div class="form-group">
                <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">Edit</a>
                <a asp-action="Index" class="btn btn-success">Back to List</a>
            </div>
        </div>

        <div class="col-md-4">
            <img src="~/@Model.Image" id="myimage" width="108%" height="300px" style="border-radius: 5px;border: 1px solid #efefef" />
        </div>
        <div id="myresult" class="img-zoom-result abc"></div>

    </div>
</form>
@section Scripts{


    <script>
        $(document).ready(function () {
            imageZoom("myimage", "myresult");

        });
         function imageZoom(imgID, resultID) {
            var img, lens, result, cx, cy;
            img = document.getElementById(imgID);
            result = document.getElementById(resultID);
            /* Create lens: */
            lens = document.createElement("DIV");
            lens.setAttribute("class", "img-zoom-lens");
            /* Insert lens: */
            img.parentElement.insertBefore(lens, img);
            /* Calculate the ratio between result DIV and lens: */
            cx = result.offsetWidth / lens.offsetWidth;
            cy = result.offsetHeight / lens.offsetHeight;
            /* Set background properties for the result DIV */
            result.style.backgroundImage = "url('" + img.src + "')";
            result.style.backgroundSize = (img.width * cx) + "px " + (img.height * cy) + "px";
            /* Execute a function when someone moves the cursor over the image, or the lens: */
            lens.addEventListener("mousemove", moveLens);
            img.addEventListener("mousemove", moveLens);
            /* And also for touch screens: */
            lens.addEventListener("touchmove", moveLens);
            img.addEventListener("touchmove", moveLens);
            function moveLens(e) {
                var pos, x, y;
                /* Prevent any other actions that may occur when moving over the image */
                e.preventDefault();
                /* Get the cursor's x and y positions: */
                pos = getCursorPos(e);
                /* Calculate the position of the lens: */
                x = pos.x - (lens.offsetWidth / 2);
                y = pos.y - (lens.offsetHeight / 2);
                /* Prevent the lens from being positioned outside the image: */
                if (x > img.width - lens.offsetWidth) { x = img.width - lens.offsetWidth; }
                if (x < 0) { x = 0; }
                if (y > img.height - lens.offsetHeight) { y = img.height - lens.offsetHeight; }
                if (y < 0) { y = 0; }
                /* Set the position of the lens: */
                lens.style.left = x + "px";
                lens.style.top = y + "px";
                /* Display what the lens "sees": */
                result.style.backgroundPosition = "-" + (x * cx) + "px -" + (y * cy) + "px";
            }
            function getCursorPos(e) {
                var a, x = 0, y = 0;
                e = e || window.event;
                /* Get the x and y positions of the image: */
                a = img.getBoundingClientRect();
                /* Calculate the cursor's x and y coordinates, relative to the image: */
                x = e.pageX - a.left;
                y = e.pageY - a.top;
                /* Consider any page scrolling: */
                x = x - window.pageXOffset;
                y = y - window.pageYOffset;
                return { x: x, y: y };
            }

        }
    </script>
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}



    <style>
    * {
        box-sizing: border-box;
    }

    .img-zoom-container {
        position: relative;
    }

    .img-zoom-lens {
        position: absolute;
        /*set the size of the lens:*/
        width: 120px;
        height: 140px;
        overflow: hidden;
        opacity: .5 !important; /* IE 8 */

        filter: alpha(opacity=50) !important; /* Netscape */
    }

    .img-zoom-result {
        width: 28%;
        height: 300px;
        position: relative;
        top: 0px;
        left: 814px;
       
    }


    .rfresh {
        position: relative;
        top: 1px;
        right: 89px;
    }
   

    </style>

